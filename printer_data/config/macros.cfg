######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT.

[gcode_macro PRINT_START]
gcode:        
  # Parameters
  {% set bedtemp = params.BED|int %}
  {% set hotendtemp = params.HOTEND|int %}
  {% set chambertemp = params.CHAMBER|default(0)|int %}

  SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
  SET_GCODE_OFFSET Z=0                                                         ; reset z-offset
  SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE=0                             ; reset pressure advance
  M221 S100                                                                    ; reset extrusion factor

  STATUS_HEATING
  M190 S{bedtemp}                                                             ; set & wait for bed temp
  TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chambertemp}  ; wait for chamber temp
  {action_respond_info("Heating chamber to %d Â°C" % chambertemp)}
  M104 S{hotendtemp - 60}                                                     ; set temporary hotend temp
  G90                                                                         ; absolute positioning
  STATUS_HOMING
  G28                                                                         ; home all axes
  BED_MESH_CLEAR
  STATUS_MESHING
  BED_MESH_CALIBRATE
  # DOCK_PROBE
  M104 S{hotendtemp}                                                          ; set final hotend temp
  G0 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_minimum.y} Z20 F3000
  STATUS_HEATING
  M109 S{hotendtemp}                                                          ; set & wait for hotend temp
  CLEAN_NOZZLE
  M83                                                                         ; extruder relative mode
  G92 E0                                                                      ; reset extruder
  STATUS_PRINTING
  CHAMBER_LED
  LINE_PURGE
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                         ; enable filament sensor. COMMENT OUT FOR TPU

[gcode_macro PRINT_END]
gcode:
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
  G91                                                                         ; relative positioning
  G1 X-2 Y-2 E-3 F300                                                         ; Move nozzle away from print while retracting
  PARKREAR
  OFF                                                                         ; turn off steppers, bed, extruder, and fan
  G90

######################################################################
# Pause/Resume/Cancel Print
######################################################################

# Pause routines with filament sensor

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  # Parameters
  {% set z = params.Z|default(10)|int %}                                                 ; z hop amount

  {% if printer['pause_resume'].is_paused|int == 0 %}
    STATUS_BUSY
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
    SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
    BASE_PAUSE                                                                           ; pause print
    {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
      G91                                                                                ; relative positioning
      G1 Z{z} F900                                                                       ; raise Z up by z hop amount
    {% else %}
      { action_respond_info("Pause zhop exceeds maximum Z height.") }                    ; if z max is exceeded, show message and set zhop value for resume to 0
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
    {% endif %}
    G90                                                                                  ; absolute positioning
    G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
    SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
    M104 S0                                                                              ; turn off hotend
    SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
  {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
  # Parameters
  {% set e = params.E|default(2.5)|int %}                                        ; hotend prime amount (in mm)

  {% if printer['pause_resume'].is_paused|int == 1 %}
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
    #INITIAL_RGB                                                                    ; reset LCD color
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
    {% if etemp > 0 %}
      M109 S{etemp|int}                                                          ; wait for hotend to heat back up
    {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
    G91                                                                          ; relative positioning
    M83                                                                          ; relative extruder positioning
    {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
      G1 Z{zhop * -1} E{e} F900                                                  ; prime nozzle by E, lower Z back down
    {% else %}
      G1 Z{zhop * -1} F900                                                       ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
    {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
    STATUS_PRINTING
    BASE_RESUME                                                                  ; resume print
  {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  STATUS_INIT
  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  PRINT_END
  BASE_CANCEL_PRINT

######################################################################
# Off
######################################################################

# Turn off everything at once

[gcode_macro OFF]
gcode:
  M84                                                               ; turn steppers off
  M107                                                              ; turn print cooling fan off
  TURN_OFF_HEATERS                                                  ; turn bed / hotend off
  SET_LED LED="chamber_LED" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1  ; turn case light off
  # SET_FAN_SPEED FAN=Exhaust SPEED=0                               ; turn exhaust fan off
  # SET_FAN_SPEED FAN=nevermore SPEED=0                             ; bed fan off
  STATUS_OFF

######################################################################
# Clean Nozzle
######################################################################

# Nozzle scrubbing routine

[gcode_macro CLEAN_NOZZLE]
variable_start_x: -19
variable_start_y: -9
variable_start_z: 2.5
variable_wipe_dist: 13.5
variable_wipe_qty: 10
variable_wipe_spd: 200
variable_raise_distance: 2

gcode:
  STATUS_CLEANING
  _CG28
  G90                                           ; absolute positioning
  ## Move nozzle to start position
  G0 X-20 Y{start_y} Z20 F6000
  G0 Z{start_z} F1500

  ## Wipe nozzle
  {% for wipes in range(1, (wipe_qty + 1)) %}
    G0 X{start_x + wipe_dist} F{wipe_spd * 60}
    G0 X{start_x} F{wipe_spd * 60}
  {% endfor %}
  G0 X{start_x + wipe_dist} F{wipe_spd * 60}
  
  ## Raise nozzle
  G0 Z{raise_distance}

######################################################################
# Chamber LED
######################################################################

# Presets to change chamber LED's 

[gcode_macro CHAMBER_LED]
gcode:
  # Parameters
  {% set preset = params.PRESET|default('natural'|string) %}

  {% if preset == 'natural' %}
    SET_LED LED="chamber_LED" RED=1 GREEN=0.7961 BLUE=0.4078 SYNC=0 TRANSMIT=1
  {% elif preset == 'natural_dim' %}
    SET_LED LED="chamber_LED" RED=0.251 GREEN=0.2 BLUE=0.102 SYNC=0 TRANSMIT=1
  {% elif preset == 'cool' %}
    SET_LED LED="chamber_LED" RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1
  {% elif preset == 'cool_dim' %}
    SET_LED LED="chamber_LED" RED=0.251 GREEN=0.251 BLUE=0.251 SYNC=0 TRANSMIT=1
  {% elif preset == 'candlelight' %}
    SET_LED LED="chamber_LED" RED=0.251 GREEN=0.0902 BLUE=0.0157 SYNC=0 TRANSMIT=1
  {% else %}
    M117 Invalid Preset
  {% endif %}


######################################################################
# Beeper
######################################################################

# Allows you to utilize your LCD beeper. This requires you to 
# specify your beeper pin as an output pin.

[gcode_macro BEEP]
gcode:
  # Parameters
  {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
  {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
  {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

  {% for iteration in range(i|int) %}
    SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
    G4 P{dur}
    SET_PIN PIN=beeper VALUE=0
    G4 P{dur}
  {% endfor %}

######################################################################
# Conditional Homing
######################################################################

# Home if not already homed.

[gcode_macro _CG28]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

######################################################################
# Dump Variables
######################################################################

# Dumps all current Klipper variables to the g-code terminal.
# Arguments
# - NAME (string) - Filter results based on name (only show varables with names containing this string)
# - VALUE (string) - Filter results based on value (only show values containing this value)
# - SHOW_CFG (integer, 0-1) - Set to 1 to include entire config in output. Default 0 (config filtered out)

[gcode_macro DUMP_VARIABLES]
gcode:
  {% set filter_name = params.NAME|default('')|string|lower %}
  {% set filter_value = params.VALUE|default('')|string|lower %}
  {% set show_cfg = params.SHOW_CFG|default(0)|int %}
  
  {% set out = [] %}

  {% for key1 in printer %}
    {% for key2 in printer[key1] %}
      {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
        {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
      {% endif %}
    {% else %}
      {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
        {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  
  {action_respond_info(out|join("\n"))}

######################################################################
# Get Variable
######################################################################

# Returns value and type of a single variable to the g-code terminal. 
# Keys and indexes can be chained to access nested dictionaries and lists.
# Arguments
# - NAME (string) (required) - Specify the name of the variable that you want to retreive.

[gcode_macro GET_VARIABLE]
gcode:
  {% set names = (params.NAME).split('.')|list %}
  {% set join = (params.JOIN)|default(1)|int %}
  
  {% set _dummy0 = namespace( break = 0 ) %}
  {% set _dummy1 = namespace( out = printer[names|first] ) %}
  
  {% for name in names if _dummy0.break == 0 %}
    {% if loop.index > 1 %}
      {% if name in _dummy1.out %}
        {% set _dummy1.out = _dummy1.out[name] %}
      {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
        {% set _dummy1.out = _dummy1.out[name|int] %}
      {% else %}
        {% set _dummy0.break = loop.index0 %}
      {% endif %}
    {% endif %}
  {% endfor %}
  
  {% if _dummy1.out is boolean %}
    { action_respond_info('Type: boolean') }
  {% elif _dummy1.out is float %}
    { action_respond_info('Type: float') }
  {% elif _dummy1.out is integer %}
    { action_respond_info('Type: integer') }
  {% elif _dummy1.out is mapping %}
    { action_respond_info('Type: mapping') }
  {% elif _dummy1.out is string %}
    { action_respond_info('Type: string') }
  {% elif _dummy1.out is iterable %}
    { action_respond_info('Type: iterable') }
  {% elif _dummy1.out is none %}
    { action_respond_info('Type: none') }
  {% elif _dummy1.out is undefined %}
    { action_respond_info('Type: undefined') }
  {% elif _dummy1.out is callable %}
    { action_respond_info('Type: callable') }
  {% else %}
    { action_respond_info('Type: unknown') }
  {% endif %}
  
  {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
    { action_respond_info('%s' % _dummy1.out|join("\n")) }
  {% else %}
    { action_respond_info('%s' % _dummy1.out) }
  {% endif %}
  
  {% if _dummy0.break != 0 %}
    { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
  {% endif %}

######################################################################
# Parking
######################################################################

# Park the toolhead at different places. Automatically determined based on your printerâs configured size.

# Park front center
[gcode_macro PARKFRONT]
gcode:
  # Parameters
  {% set z = params.Z|default(10)|int %}                                               ; z hop amount
  
  _CG28
  SAVE_GCODE_STATE NAME=PARKFRONT
  {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
    G91                                                                                ; relative positioning
    G1 Z{z} F6000
    G90                                                                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
  {% elif printer.gcode_move.position.z == printer.toolhead.axis_maximum.z %}
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
  {% else %}
    G91                                                                                ; relative positioning
    G1 Z1 F6000
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
  {% endif %}
  RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
  _CG28
  SAVE_GCODE_STATE NAME=PARKFRONT
  G90                               ; absolute positioning
  G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
  RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
gcode:
  # Parameters
  {% set z = params.Z|default(10)|int %}                                               ; z hop amount

  _CG28
  SAVE_GCODE_STATE NAME=PARKREAR
  {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}      ; check that zhop doesn't exceed z max
    G91                                                                                ; relative positioning
    G1 Z{z} F6000
    G90
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} F6000     
  {% else %}
    G91                                                                                ; relative positioning
    G1 Z1 F6000
    G90
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} F6000
  {% endif %}
  RESTORE_GCODE_STATE NAME=PARKREAR

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
  _CG28
  SAVE_GCODE_STATE NAME=PARKCENTER
  G90                               ; absolute positioning
  G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
  RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
  _CG28
  SAVE_GCODE_STATE NAME=PARKBED
  G90                               ; absolute positioning
  G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
  RESTORE_GCODE_STATE NAME=PARKBED

######################################################################
# Determining Maximum Speeds and Accelerations
######################################################################

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

# [gcode_macro TEST_SPEED_SETUP_ONE]
# gcode:
#   # Home and get position for comparison later:
#   G28
#   # QGL if not already QGLd (only if QGL section exists in config)
#   {% if printer.configfile.settings.quad_gantry_level %}
#     {% if printer.quad_gantry_level.applied == False %}
#       QUAD_GANTRY_LEVEL
#       G28 Z
#     {% endif %}
#   {% endif %} 
#   # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
#   G90
#   G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}

# [gcode_macro TEST_SPEED_SETUP_TWO]
# gcode:
#   G28 X Y
#   G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
#   G4 P1000 
#   GET_POSITION

# [gcode_macro TEST_SPEED_END]
# gcode:
#   # Re-home and get position again for comparison:
#   G28
#   # Go to XY home positions (in case your homing override leaves it elsewhere)
#   G90
#   G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
#   G4 P1000 
#   GET_POSITION

# [gcode_macro TEST_SPEED]
# gcode:
#   # Speed
#   {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
#   # Iterations
#   {% set iterations = params.ITERATIONS|default(5)|int %}
#   # Acceleration
#   {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
#   # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
#   {% set bound = params.BOUND|default(20)|int %}
#   # Size for small pattern box
#   {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
  
#   # Large pattern
#     # Max positions, inset by BOUND
#     {% set x_min = printer.toolhead.axis_minimum.x + bound %}
#     {% set x_max = printer.toolhead.axis_maximum.x - bound %}
#     {% set y_min = printer.toolhead.axis_minimum.y + bound %}
#     {% set y_max = printer.toolhead.axis_maximum.y - bound %}
  
#   # Small pattern at center
#     # Find X/Y center point
#     {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
#     {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
    
#     # Set small pattern box around center point
#     {% set x_center_min = x_center - (smallpatternsize/2) %}
#     {% set x_center_max = x_center + (smallpatternsize/2) %}
#     {% set y_center_min = y_center - (smallpatternsize/2) %}
#     {% set y_center_max = y_center + (smallpatternsize/2) %}

#   # Save current gcode state (absolute/relative, etc)
#   SAVE_GCODE_STATE NAME=TEST_SPEED
  
#   # Output parameters to g-code terminal
#   { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
  
#   # Home and get position for comparison later:
#   G28
#   # QGL if not already QGLd (only if QGL section exists in config)
#   {% if printer.configfile.settings.quad_gantry_level %}
#     {% if printer.quad_gantry_level.applied == False %}
#       QUAD_GANTRY_LEVEL
#       G28 Z
#     {% endif %}
#   {% endif %} 
#   # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
#   G90
#   G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
#   G4 P5000
#   G28 X Y
#   G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
#   G4 P1000 
#   GET_POSITION

#   # Go to starting position
#   G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

#   # Set new limits
#   SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

#   {% for i in range(iterations) %}
#     M117 Iteration {i+1}
#     # Large pattern
#       # Diagonals
#       G0 X{x_min} Y{y_min} F{speed*60}
#       G0 X{x_max} Y{y_max} F{speed*60}
#       G0 X{x_min} Y{y_min} F{speed*60}
#       G0 X{x_max} Y{y_min} F{speed*60}
#       G0 X{x_min} Y{y_max} F{speed*60}
#       G0 X{x_max} Y{y_min} F{speed*60}
      
#       # Box
#       G0 X{x_min} Y{y_min} F{speed*60}
#       G0 X{x_min} Y{y_max} F{speed*60}
#       G0 X{x_max} Y{y_max} F{speed*60}
#       G0 X{x_max} Y{y_min} F{speed*60}
    
#     # Small pattern
#       # Small diagonals 
#       G0 X{x_center_min} Y{y_center_min} F{speed*60}
#       G0 X{x_center_max} Y{y_center_max} F{speed*60}
#       G0 X{x_center_min} Y{y_center_min} F{speed*60}
#       G0 X{x_center_max} Y{y_center_min} F{speed*60}
#       G0 X{x_center_min} Y{y_center_max} F{speed*60}
#       G0 X{x_center_max} Y{y_center_min} F{speed*60}
      
#       # Small box
#       G0 X{x_center_min} Y{y_center_min} F{speed*60}
#       G0 X{x_center_min} Y{y_center_max} F{speed*60}
#       G0 X{x_center_max} Y{y_center_max} F{speed*60}
#       G0 X{x_center_max} Y{y_center_min} F{speed*60}
#   {% endfor %}

#   # Restore max speed/accel/accel_to_decel to their configured values
#   SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
#   G4 P5000

#   # Re-home and get position again for comparison:
#   G28
#   # Go to XY home positions (in case your homing override leaves it elsewhere)
#   G90
#   G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
#   G4 P1000 
#   GET_POSITION

#   # Restore previous gcode state (absolute/relative, etc)
#   RESTORE_GCODE_STATE NAME=TEST_SPEED

######################################################################
# Filament Sensor Management  (from https://github.com/VoronDesign/VoronUsers/tree/master/printer_mods/Empusas/BTT_Filament_Motion_Sensor_Mount)
######################################################################

# Retrieve filament sensor info

[gcode_macro _RUNOUT_INFO]
gcode:
  {% if 'filament_motion_sensor runout' in printer.configfile.settings %}
    #{% set enable = printer['filament_motion_sensor filament_sensor'].enabled %}
    #{% set detect = printer['filament_motion_sensor filament_sensor'].filament_detected %}
    {% set enable = true %}
    {% set detect = true %}
    {action_respond_info("RUNOUT Motion Sensor:
                          Enabled: %s
                          Detect Filament: %s" % (enable|lower,detect|lower))}
  {% endif %}

######################################################################
# Replace M109 With TEMPERATURE_WAIT
######################################################################

# Makes Klipper resume immediately after reaching temp. 
# Otherwise it waits for the temperature to stabilize.

[gcode_macro M109]
rename_existing: M99109
gcode:
  #Parameters
  {% set s = params.S|float %}

  STATUS_HEATING
  M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
  {% if s != 0 %}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
  {% endif %}

# [gcode_macro M104]
# rename_existing: M99104
# gcode:
#   #Parameters
#   {% set s = params.S|float %}

#   STATUS_HEATING
#   M99104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp

######################################################################
# Shut Down Host
######################################################################

[gcode_macro SHUTDOWN]
gcode:
  # LCDRGB R=0 G=0 B=0                               ; Turn off LCD neopixels (see above for this macro)
  OFF                                               ; Shortcut to turn everything off (see above for this macro)
  {action_respond_info('action:poweroff')}          ; OctoPrint compatible host shutdown
  {action_call_remote_method("shutdown_machine")}   ; Moonraker compatible host shutdown
